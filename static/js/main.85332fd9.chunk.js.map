{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","coord","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","_this$props","ncols","nrows","chanceLightStartsOn","chanceLit","arr","i","push","Math","random","_this$props2","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","every","row","cell","setState","_this2","rows","key","boolVal","col","src_Cell_0","concat","unfinishedGame","finishedGame","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85332fd9.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.coord);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25,\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.createBoard = this.createBoard.bind(this);\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n\n  }\n\n  createBoard() {\n    let {ncols, nrows, chanceLightStartsOn} = this.props;\n    function chanceLit(){\n      let arr = [];\n      for(let i = 0; i < ncols; i++){\n        arr.push(Math.random() < chanceLightStartsOn)\n      }\n      return arr;\n    }\n    let board = [];\n    for(let i = 0; i < nrows; i++){\n      board.push(chanceLit())\n    }\n   \n    return board\n  }\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n        if(y > 0) board[y-1][x] = !board[y-1][x];\n        if(y < 4) board[y+1][x] = !board[y+1][x];\n        if(x > 0) board[y][x-1] = !board[y][x-1];\n        if(x < 4) board[y][x+1] = !board[y][x+1];\n      }\n    }\n    \n    flipCell(y, x);\n    let hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({board, hasWon});\n    \n  }\n\n  render() {\n    let board = this.state.board;\n    let rows = board.map((arr, row) => {\n        return <tr key={row}>\n          {arr.map((boolVal, col) => {\n            return <Cell \n            key={`${row}-${col}`} \n            coord={`${row}-${col}`} \n            isLit={boolVal} \n            flipCellsAroundMe={this.flipCellsAround} \n            />\n          })}\n        </tr>\n    });\n    let unfinishedGame = (\n      <div>\n        <div className=\"Board-title\">\n          <div className=\"neon-orange\">Lights</div>\n          <div className=\"neon-blue\">Out</div>\n        </div>\n        <table className=\"Board\">\n            <tbody>\n                {rows}\n            </tbody>\n        </table>\n      </div>\n    );\n  let finishedGame = (<h1>CONGRATULATIONS! YOU WON!</h1>)\n      return (\n        this.state.hasWon ? finishedGame : unfinishedGame\n      );\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}